package az.itcity.bacar.repository;

import az.itcity.bacar.domain.Task;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.util.List;
import java.util.Optional;

@Repository
public class TaskRepositoryImpl implements TaskRepository{

    private JdbcTemplate jdbcTemplate;
    private TaskRowMapper taskRowMapper;

    public TaskRepositoryImpl(JdbcTemplate jdbcTemplate, TaskRowMapper taskRowMapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.taskRowMapper = taskRowMapper;
    }


    @Override
    public List<Task> getTaskList() {
        String sql = "select id, title, description, created_at, finished_at, status " +
                "from task\n" +
                "order by id";

        return jdbcTemplate.query(sql, taskRowMapper );
    }

    @Override
    public Optional<Task> getTaskById(long id) {
        Optional<Task> optionalTask = Optional.empty();
        String sql = "select id, title, description, created_at, finished_at, status " +
                "from task\n" +
                "where id = ?";

        List<Task> task = jdbcTemplate.query(sql, taskRowMapper, id);
        if(!task.isEmpty()){
            optionalTask = Optional.of(task.get(0));
        }
        return optionalTask;

    }

    @Override
    public Task add(Task task) {
        String sql = "insert into task (title, description, created_at, finished_at, status) " +
                "values(?, ?, ?, ?, ?)";
        Object[] data = new Object[] {task.getTitle(), task.getDescription(), task.getCreatedAt(), task.getFinishedAt(), task.getStatus()};
        int count = jdbcTemplate.update(sql,data);
        if(count == 1){
            System.out.println("Isci elave olundu");
        }
        return task;
    }


    /*
   @Override
   public Task add(Task task) {
       String sql = "insert into task (title, description, created_at, finished_at, status) " +
               "values(?, ?, ?, ?, ?)";
       Object[] data = new Object[] {task.getTitle(), task.getDescription(), task.getCreatedAt(), task.getFinishedAt(), task.getStatus()};
       // int count = jdbcTemplate.update(sql, data);

       KeyHolder keyHolder = new GeneratedKeyHolder();
       int count = jdbcTemplate.update(connection -> {
                   PreparedStatement ps = connection.prepareStatement(sql, new String[]{"id"});
                   ps.setString(1, task.getTitle());
                   ps.setString(2, task.getDescription());
                   ps.setTimestamp(3, task.getCreatedAt());
                   ps.setTimestamp(4, task.getFinishedAt());
                   ps.setString(5, task.getStatus());

                   return ps;
               },
               keyHolder);

       if(count == 1){
           System.out.println("yeni task elave olundu");
           task.setId(keyHolder.getKey().longValue());
       }
       return task;
   }
*/
    @Override
    public Task update(Task task) {
        String sql = "update task " +
                "set title = ?, description = ?, created_at=?, finished_at = ?, status = ? " +
                "where id = ? ";
        Object[] data = new Object[]{task.getTitle(), task.getDescription(), task.getCreatedAt(), task.getFinishedAt(),
                task.getStatus(), task.getId()};
        int count = jdbcTemplate.update(sql, data);
        if(count == 1) {
            System.out.println("Task update olundu");
        }
        return task;
    }

    @Override
    public boolean delete(long id) {
        String sql = " delete from task " +
                "where id = ? ";
        int count = jdbcTemplate.update(sql, id);
        return count>0;
    }



}
