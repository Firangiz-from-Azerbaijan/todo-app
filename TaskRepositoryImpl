package az.itcity.bacar.repository;

import az.itcity.bacar.domain.Task;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public class TaskRepositoryImpl implements TaskRepository{

    private JdbcTemplate jdbcTemplate;
    private TaskRowMapper taskRowMapper;

    public TaskRepositoryImpl(JdbcTemplate jdbcTemplate, TaskRowMapper taskRowMapper) {
        this.jdbcTemplate = jdbcTemplate;
        this.taskRowMapper = taskRowMapper;
    }


    @Override
    public List<Task> getTaskList() {
        String sql = "select id, title, description, status " +
                "from task\n" +
                "order by id";

        return jdbcTemplate.query(sql, taskRowMapper );
    }

    @Override
    public Optional<Task> getTaskById(long id) {
        Optional<Task> optionalTask = Optional.empty();
        String sql = "select id, title, description, status " +
                "from task " +
                "where id = ?";

        Task task = jdbcTemplate.queryForObject(sql, taskRowMapper, id);
        if(task != null) {
            optionalTask= Optional.of(task);
        }
        return optionalTask;
    }


    /*  private List<Employee> employees;

    public EmployeeRepositoryImpl() {
        this.employees = new ArrayList<>();
        employees.add(new Employee(1, "Ali", "Mammadov", BigDecimal.valueOf(3000)));
        employees.add(new Employee(2, "Hasan", "Heyderov", BigDecimal.valueOf(4000)));
        employees.add(new Employee(3, "Natiq", "Aliyev", BigDecimal.valueOf(5000)));
        employees.add(new Employee(4, "Gulshen", "Aydinova", BigDecimal.valueOf(6000)));
        employees.add(new Employee(5, "Xatire", "Seyidova", BigDecimal.valueOf(7000)));

    }

*/

      /*  private NamedParameterJdbcTemplate jdbcTemplate;
        private EmployeeRowMapper employeeRowMapper;
        private EmployeeResultSetExtractor employeeResultSetExtractor;

        public EmployeeRepositoryImplAdvanced(NamedParameterJdbcTemplate jdbcTemplate, EmployeeRowMapper employeeRowMapper, EmployeeResultSetExtractor employeeResultSetExtractor) {
            this.jdbcTemplate = jdbcTemplate;
            this.employeeRowMapper = employeeRowMapper;
            this.employeeResultSetExtractor = employeeResultSetExtractor;
        }

        @Override
        public List<Employee> getEmployeeList() {
            String sql = "select id, name, surname, salary " +
                    "from employee " +
                    "order by id";

//        return jdbcTemplate.query(sql, employeeRowMapper);
            return jdbcTemplate.query(sql, employeeResultSetExtractor);
        }

        @Override
        public Optional<Employee> getEmployeeById(long id) {
            Optional<Employee> optionalEmployee = Optional.empty();
            String sql = "select id, name, surname, salary " +
                    "from employee " +
                    "where id = :id";
            MapSqlParameterSource params = new MapSqlParameterSource("id", id);
            List<Employee> employees = jdbcTemplate.query(sql, params, employeeRowMapper);
            if (!employees.isEmpty()) {
                optionalEmployee = Optional.of(employees.get(0));
            }
            return optionalEmployee;
        }

        @Override
        public Employee add(Employee employee) {
            String sql = "insert into employee(name, surname, salary) " +
                    "values(:name, :surname, :salary)";
            MapSqlParameterSource params = new MapSqlParameterSource("name", employee.getName())
                    .addValue("surname", employee.getSurname())
                    .addValue("salary", employee.getSalary());

            KeyHolder keyHolder = new GeneratedKeyHolder();
            int count = jdbcTemplate.update(sql, params, keyHolder, new String[]{"id"});

            if (count == 1) {
                System.out.println("isci elave olundu");
                employee.setId(keyHolder.getKey().longValue());
            }
            return employee;
        }

        @Override
        public Employee update(Employee employee) {
            String sql = "update employee " +
                    "set name = :name, surname = :surname, salary = :salary " +
                    "where id = :id";
            MapSqlParameterSource params = new MapSqlParameterSource("name", employee.getName())
                    .addValue("surname", employee.getSurname())
                    .addValue("salary", employee.getSalary())
                    .addValue("id", employee.getId());

            int count = jdbcTemplate.update(sql, params);
            if(count == 1) {
                System.out.println("isci update olundu");
            }
            return employee;
        }

        @Override
        public boolean delete(long id) {
            String sql = "delete from employee " +
                    "where id = :id";
            MapSqlParameterSource params = new MapSqlParameterSource("id", id);
            int count = jdbcTemplate.update(sql,params);
            return count > 0;
        }


       */


}
